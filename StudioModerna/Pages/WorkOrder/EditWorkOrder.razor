@page "/edit-work-order/{workOrderId?}"

@inject NavigationManager NavigationManager
@inject IGetWorkOrderById GetWorkOrderByIdUseCase
@inject IViewAllClients ViewClientUseCase
@inject IEditWorkOrder EditWorkOrderUseCase
@inject IViewAllAssignments ViewAllAssignmentsUseCase

@if (workOrder != null)
{
    <h3>Edit @workOrder.BookName</h3>

    <hr />
    <br />

    <EditForm Model="@workOrder" OnValidSubmit="@HandleValidSubmit" class="align-content-between">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="book-name">Book name</label>
            <InputText id="book-name" @bind-Value="workOrder.BookName" class="form-control"></InputText>
        </div>
        @if(clients != null)
        {
        <div class="form-group">
            <label for="client-id">Client</label>
            <select id="client-id" @bind="workOrder.ClientId" class="form-control">
                <option selected></option>
                @foreach (var client in clients)
                {
                    <option value="@client.Id">@client.Name</option>
                }
            </select>
        </div>
        }
        @if (assignments != null)
        {
            <div class="form-group">
                <label for="assignment-id">Assignment</label>
                <select id="assignment-id" @bind="workOrder.AssignmentId" class="form-control">
                    <option selected></option>
                    @foreach (var assignment in assignments)
                    {
                        <option value="@assignment.Id">@assignment.Description</option>
                    }
                </select>
            </div>
        }
        <div class="form-group">
            <label for="num-books">Number of books</label>
            <InputNumber id="num-books" @bind-Value="workOrder.TotalNumberOfBooks" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="num-package">Number of books in one package</label>
            <InputNumber id="num-package" @bind-Value="workOrder.NumberOfBooksInPackage" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="delivery-date">Delivery date</label>
            <InputDate id="delivery-date" @bind-Value="workOrder.DeliveryDate" class="form-control"></InputDate>
        </div>

        <div class="form-group">
            <label for="is-done">Is done</label>
            <InputCheckbox id="is-done" @bind-Value="workOrder.IsDone"></InputCheckbox>
        </div>
        <br />
        <br />

        <button type="submit" class="btn btn-dark">Save</button>
        <br />
        <br />
        <button type="button" class="btn btn-dark" @onclick="OnCancel">Cancel</button>
    </EditForm>
}
else
{
    <h4>Nešto je pošlo po zlu.</h4>
}
<br />
<br />
@code {
    [Parameter]
    public string? workOrderId { get; set; }

    private WorkOrder? workOrder;
    private WorkOrder? working;

    private IEnumerable<Client>? clients;
    private IEnumerable<Assignment>? assignments;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        clients = ViewClientUseCase.Execute();
        assignments = ViewAllAssignmentsUseCase.Execute();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.workOrderId, out int iWorkOrderId))
        {
            this.working = GetWorkOrderByIdUseCase.Execute(iWorkOrderId);
            if (working != null)
            {
                this.workOrder = new WorkOrder
                    {
                        Id = working.Id,
                        ClientId = working.ClientId,
                        AssignmentId = working.AssignmentId,
                        BookName = working.BookName,
                        TotalNumberOfBooks = working.TotalNumberOfBooks,
                        NumberOfBooksInPackage = working.NumberOfBooksInPackage,
                        DeliveryDate = working.DeliveryDate,
                        IsDone = working.IsDone
                    };
            }
        }
    }

    private void HandleValidSubmit()
    {
        if(workOrder != null)
        {
            WorkOrder submitJob = this.workOrder;
            EditWorkOrderUseCase.Execute(submitJob);
        }
        NavigationManager.NavigateTo("/work-order");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/work-order");
    }
}
