@page "/add-input-data"

@inject IAddInputData AddInputDataUseCase
@inject NavigationManager NavigationManager
@inject IViewAllSuppliers ViewSupplierUseCase



@if (inputData != null)
{
    <h3>Add new item to import</h3>
    <hr />
    <br />

    <EditForm Model="@inputData" OnValidSubmit="@HandleValidSubmit" class="align-content-between">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="inputData.NameOfAGood" class="form-control"></InputText>
        </div>
        @if (suppliers != null)
        {
            <div class="form-group">
                <label for="supplier-id">Supplier</label>
                <select id="supplier-id" @bind="inputData.SupplierId" class="form-control">
                    <option selected></option>
                    @foreach (var sup in suppliers)
                    {
                        <option value="@sup.Id">@sup.Name</option>
                    }

            </select>
        </div>
        }

        <div class="form-group">
            <label for="type">Type</label>
            <InputText id="type" @bind-Value="inputData.TypeOfAGood" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="count">Number of peices</label>
            <InputNumber id="count" @bind-Value="inputData.CountOfPeices" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="kune">Kuna's per peice</label>
            <InputNumber id="kune" @bind-Value="inputData.KunaPerPeice" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="euro">Euro's per peice</label>
            <InputNumber id="euro" @bind-Value="inputData.EuroPerPeice" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="total-kuna">Total expence[kn]</label>
            <InputNumber id="total-kuna" @bind-Value="inputData.TotalExpenceInKunas" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="total-euro">Total expence[]</label>
            <InputNumber id="total-euro" @bind-Value="inputData.TotalExpenceInEuros" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="deadline-del">Deadline for delivery</label>
            <InputDate id="deadline-del" @bind-Value="inputData.DeliveryDeadline" class="form-control"></InputDate>
        </div>

        <div class="form-group">
            <label for="deadline-pay">Deadline for paying</label>
            <InputDate id="deadline-pay" @bind-Value="inputData.PayingDeadline" class="form-control"></InputDate>
        </div>
        <br />
        <br />
        <div>
            <button type="submit" class="btn btn-dark">Save</button>
        </div>
        <br />
        <br />
        <div>
            <button type="button" class="btn btn-dark" @onclick="OnCancel">Cancel</button>
        </div>
    </EditForm>
}
<br />
<br />

@code {
    private InputData? inputData;
    private IEnumerable<Supplier>? suppliers;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        inputData = new InputData();
        suppliers = ViewSupplierUseCase.Execute();
    }

    private void HandleValidSubmit()
    {
        if (inputData != null)
        {
            inputData.IsDelivered = false;
            inputData.IsPaid = false;
            inputData.calculate();
            float defaultValue = -1.0f;
            if (inputData.KunaPerPeice != defaultValue || inputData.EuroPerPeice != defaultValue
                || inputData.TotalExpenceInKunas != defaultValue || inputData.TotalExpenceInEuros != defaultValue)
            {
                AddInputDataUseCase.Execute(inputData);
                NavigationManager.NavigateTo("/input-data");
            }
        }
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/input-data");
    }
}
