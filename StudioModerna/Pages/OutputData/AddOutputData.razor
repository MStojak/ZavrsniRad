@page "/add-output-data"

@inject IAddOutputData AddOutputDataUseCase
@inject NavigationManager NavigationManager
@inject IViewAllClients ViewClientUseCase
@inject IGetClientById GetClientByIdUseCase



@if (outputData != null)
{
    <h3>Add new item to import</h3>
    <hr />
    <br />

    <EditForm Model="@outputData" OnValidSubmit="@HandleValidSubmit" class="align-content-between">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Book name</label>
            <InputText id="name" @bind-Value="outputData.BookName" class="form-control"></InputText>
        </div>
        @if (clients != null)
        {
            <div class="form-group">
                <label for="supplier-id">Client</label>
                <select id="supplier-id" @bind="outputData.ClientId" class="form-control">
                    <option selected></option>
                    @foreach (var client in clients)
                    {
                        <option value="@client.Id">@client.Name</option>
                    }
                </select>
            </div>
        }
        <div class="form-group">
            <label for="total-deadline">Deadline</label>
            <InputDate id="total-deadline" @bind-Value="outputData.Deadline" class="form-control"></InputDate>
        </div>

        <div class="form-group">
            <label for="type-num">Number of books</label>
            <InputNumber id="type-num" @bind-Value="outputData.BookCount" class="form-control"></InputNumber>
        </div>


        <div class="form-group">
            <label for="package-pay">Number of books in package</label>
            <InputNumber id="package-pay" @bind-Value="outputData.PackageCount" class="form-control"></InputNumber>
        </div>

        <div class="form-group form-check">
            <label for="certify-pay">Need for certify delivery note?</label>
            <InputCheckbox id="certify-pay" @bind-Value="outputData.CertifyDeliveryNote"></InputCheckbox>
        </div>
        <br />
        <br />

        <div>
            <button type="submit" class="btn btn-dark">Save</button>
        </div>
        <br />
        <br />
        <div>
            <button type="button" class="btn btn-dark" @onclick="OnCancel">Cancel</button>
        </div>
    </EditForm>
}

<br />
<br />
@code {
    private OutputData? outputData;
    private IEnumerable<Client>? clients;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        outputData = new OutputData();
        clients = ViewClientUseCase.Execute();
    }

    private void HandleValidSubmit()
    {
        if (outputData != null)
        {
            OutputData output = outputData;
            Client? client = GetClientByIdUseCase.Execute(output.ClientId);
            if (client != null)
            {
                output.Location = client.Adress;
                output.Contact = client.Phone;
            }
            output.IsDone = false;
            AddOutputDataUseCase.Execute(output);
        }
        NavigationManager.NavigateTo("/output-data");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/output-data");
    }
}
